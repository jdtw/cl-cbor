;;;; tests.lisp

;;;; Copyright (c) 2017, John Wood <j@jdtw.us>
;;;; See LICENSE for additional information.

(defpackage #:cl-cbor-test
  (:use #:cl
        #:prove))

(in-package #:cl-cbor-test)

(plan nil)

(defmacro is-encode-decode (thing)
  `(is (cbor:decode-sequence
        (cbor:encode-to-sequence ,thing))
       ,thing))

(subtest "Testing integers"
  (is-encode-decode 0)
  (is-encode-decode 1)
  (is-encode-decode 23)
  (is-encode-decode 24)
  (is-encode-decode #xffff)
  (is-encode-decode #x10000)
  (is-encode-decode #xffffff)
  (is-encode-decode #xffffffff)
  (is-encode-decode #xffffffffffffffff)
  (is-encode-decode -1)
  (is-encode-decode -23)
  (is-encode-decode -24)
  (is-encode-decode #x-ffff)
  (is-encode-decode #x-10000)
  (is-encode-decode #x-ffffff)
  (is-encode-decode #x-ffffffff)
  (is-encode-decode #x-ffffffffffffffff)
  (is-encode-decode most-positive-fixnum)
  (is-encode-decode most-negative-fixnum))

(subtest "Testing floats"
  (is-encode-decode 0.0)
  (is-encode-decode -0.0)
  (is-encode-decode 1.1)
  (is-encode-decode 1.5)
  (is-encode-decode -1.5)
  (is-encode-decode 1.2345678)
  (is-encode-decode pi)
  (is-encode-decode (- pi))
  (is-encode-decode most-positive-short-float)
  (is-encode-decode most-negative-short-float)
  (is-encode-decode most-positive-single-float)
  (is-encode-decode most-negative-single-float)
  (is-encode-decode most-positive-long-float)
  (is-encode-decode most-negative-long-float)
  (is-encode-decode most-positive-double-float)
  (is-encode-decode most-negative-double-float))

(subtest "Testing strings"
  (is-encode-decode "﻿काचं शक्नोम्यत्तुम् । नोपहिनस्ति माम् ॥")
  (is-encode-decode "Sôn bôn de magnà el véder, el me fa minga mal.")
  (is-encode-decode "᚛᚛ᚉᚑᚅᚔᚉᚉᚔᚋ ᚔᚈᚔ ᚍᚂᚐᚅᚑ ᚅᚔᚋᚌᚓᚅᚐ᚜")
  (is-encode-decode "ᛁᚳ᛫ᛗᚨᚷ᛫ᚷᛚᚨᛋ᛫ᛖᚩᛏᚪᚾ᛫ᚩᚾᛞ᛫ᚻᛁᛏ᛫ᚾᛖ᛫ᚻᛖᚪᚱᛗᛁᚪᚧ᛫ᛗᛖ᛬")
  (is-encode-decode "Ic mæg glæs eotan ond hit ne hearmiað me.")
  (is-encode-decode "[aɪ kæn iːt glɑːs ænd ɪt dɐz nɒt hɜːt miː]")
  (is-encode-decode "⠊⠀⠉⠁⠝⠀⠑⠁⠞⠀⠛⠇⠁⠎⠎⠀⠁⠝⠙⠀⠊⠞⠀⠙⠕⠑⠎⠝⠞⠀⠓⠥⠗⠞⠀⠍⠑")
  (is-encode-decode "ЌЌЌ ЌЌЌЍ Ќ̈ЍЌЌ, ЌЌ ЌЌЍ ЍЌ ЌЌЌЌ ЌЍЌЌЌЌЌ.")
  (is-encode-decode "ᛖᚴ ᚷᛖᛏ ᛖᛏᛁ ᚧ ᚷᛚᛖᚱ ᛘᚾ ᚦᛖᛋᛋ ᚨᚧ ᚡᛖ ᚱᚧᚨ ᛋᚨᚱ")
  (is-encode-decode "Мон ярсан суликадо, ды зыян эйстэнзэ а ули.")
  (is-encode-decode "Mogę jeść szkło i mi nie szkodzi.")
  (is-encode-decode "Можам да јадам стакло, а не ме штета.")
  (is-encode-decode "Мога да ям стъкло, то не ми вреди.")
  (is-encode-decode "მინას ვჭამ და არა მტკივა.")
  (is-encode-decode "Կրնամ ապակի ուտել և ինծի անհանգիստ չըներ։")
  (is-encode-decode "جام ييه بلورم بڭا ضررى طوقونمز")
  (is-encode-decode "আমি কাঁচ খেতে পারি, তাতে আমার কোনো ক্ষতি হয় না।")
  (is-encode-decode "ನನಗೆ ಹಾನಿ ಆಗದೆ, ನಾನು ಗಜನ್ನು ತಿನಬಹುದು")
  (is-encode-decode "मैं काँच खा सकता हूँ और मुझे उससे कोई चोट नहीं पहुंचती.")
  (is-encode-decode "నేను గాజు తినగలను మరియు అలా చేసినా నాకు ఏమి ఇబ్బంది లేదు")
  (is-encode-decode "මට වීදුරු කෑමට හැකියි. එයින් මට කිසි හානියක් සිදු නොවේ.")
  (is-encode-decode "زه شيشه خوړلې شم، هغه ما نه خوږوي")
  (is-encode-decode "איך קען עסן גלאָז און עס טוט מיר נישט װײ.")
  (is-encode-decode "إِنا إِىَ تَونَر غِلَاشِ كُمَ إِن غَمَا لَافِىَا")
  (is-encode-decode "က္ယ္ဝန္‌တော္‌၊က္ယ္ဝန္‌မ မ္ယက္‌စားနုိင္‌သည္‌။ ၎က္ရောင္‌့ ထိခုိက္‌မ္ဟု မရ္ဟိပာ။")
  (is-encode-decode "ខ្ញុំអាចញុំកញ្ចក់បាន ដោយគ្មានបញ្ហារ")
  (is-encode-decode "ຂອ້ຍກິນແກ້ວໄດ້ໂດຍທີ່ມັນບໍ່ໄດ້ເຮັດໃຫ້ຂອ້ຍເຈັບ.")
  (is-encode-decode "ฉันกินกระจกได้ แต่มันไม่ทำให้ฉันเจ็บ")
  (is-encode-decode "Би шил идэй чадна, надад хортой биш")
  (is-encode-decode "﻿म काँच खान सक्छू र मलाई केहि नी हुन्‍न् ।")
  (is-encode-decode "ཤེལ་སྒོ་ཟ་ནས་ང་ན་གི་མ་རེད།")
  (is-encode-decode "我能吞下玻璃而不伤身体。")
  (is-encode-decode "私はガラスを食べられます。それは私を傷つけません。")
  (is-encode-decode "나는 유리를 먹을 수 있어요. 그래도 아프지 않아요")
  (is-encode-decode "ᐊᓕᒍᖅ ᓂᕆᔭᕌᖓᒃᑯ ᓱᕋᙱᑦᑐᓐᓇᖅᑐᖓ"))

(finalize)
